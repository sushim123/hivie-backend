<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Instagram Authorization Result</title>
</head>
<body>
  <h1>Instagram Authorization</h1>

  <% if (error) { %>
    <p><%= error %></p>
  <% } else if (alreadyAuthorized) { %>
    <p>You are already authorized with Instagram.</p>
  <% } else { %>
    <p>Authorization successful!</p>

    <h1>Submit Pricing Information</h1>
    <form id="pricingForm">
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required>
      <br><br>

      <label for="postPrice">Post Price:</label>
      <select id="postPrice" name="postPrice" required>

      </select>
      <br><br>

      <label for="reelPrice">Reel Price:</label>
      <select id="reelPrice" name="reelPrice" required>
      </select>
      <br><br>

      <label for="brandRange">Brand Range:</label>
      <select id="brandRange" name="brandRange" required>
      </select>
      <br><br>

      <button type="button" onclick="submitForm()">Submit Pricing</button>
    </form>

    <div id="responseMessage"></div>

    <script>
      function generateOptions(min, max, step) {
        let options = '';
        for (let i = min; i <= max; i += step) {
          options += `<option value="${i}">${i}</option>`; // Use backticks for template literals
        }
        return options;
      }

      // Populate postPrice and reelPrice options dynamically
      document.getElementById('postPrice').innerHTML = generateOptions(100, 1000, 100);
      document.getElementById('reelPrice').innerHTML = generateOptions(100, 1000, 100);

      // Populate brandRange options dynamically
      document.getElementById('brandRange').innerHTML = generateOptions(1, 10, 1);

      async function submitForm() {
        const form = document.getElementById('pricingForm');
        const formData = new FormData(form);

        const data = {
          email: formData.get('email'),
          postPrice: parseFloat(formData.get('postPrice')),
          reelPrice: parseFloat(formData.get('reelPrice')),
          brandRange: parseInt(formData.get('brandRange'))
        };

        try {
          const response = await fetch('/api/v1/user/submit-pricing', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });

          const result = await response.json();
          if (response.ok) {
            window.location.href = '/api/v1/user/blank';
          } else {
            document.getElementById('responseMessage').innerHTML = `<p style="color: red;">${result.message || 'An error occurred'}</p>`; // Use backticks for template literals
          }
        } catch (error) {
          document.getElementById('responseMessage').innerHTML = `<p style="color: red;">Failed to submit pricing: ${error.message}</p>`; // Use backticks for template literals
        }
      }
    </script>
  <% } %>

</body>
</html>
